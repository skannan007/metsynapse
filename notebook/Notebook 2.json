{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DefaultPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "905380b2-6112-42fe-a100-cef86df45f6d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9348a962-5249-429f-840f-9be9714e6dcb/resourceGroups/met-rg/providers/Microsoft.Synapse/workspaces/met-syn-ws/bigDataPools/DefaultPool",
				"name": "DefaultPool",
				"type": "Spark",
				"endpoint": "https://met-syn-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DefaultPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import xmltodict\r\n",
					"# Set Parameters\r\n",
					"storage_account_name = 'metlake'\r\n",
					"source_container_name = 'bronze'\r\n",
					"target_container_name = 'silver'\r\n",
					"start_marker = b'<?xml version'\r\n",
					"end_marker = b'</collect:MeteorologicalBulletin>'\r\n",
					"filename = '00bf6f60-a02f-4184-ab56-f564f6b53e8d.bin'\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Construct Source and Target file names\r\n",
					"base_filename = filename.split('.')[0]\r\n",
					"source_file = f\"abfss://{source_container_name}@{storage_account_name}.dfs.core.windows.net/{base_filename}.bin\"\r\n",
					"target_file = f\"abfss://{target_container_name}@{storage_account_name}.dfs.core.windows.net/{base_filename}.xml\"\r\n",
					"target_file_flattened = f\"abfss://{target_container_name}@{storage_account_name}.dfs.core.windows.net/{base_filename}_flattened.csv\"\r\n",
					"\r\n",
					"# Read Source file\r\n",
					"file_content = spark.sparkContext.binaryFiles(source_file).values().collect()[0]\r\n",
					"\r\n",
					"# Find the indices of the start and end markers\r\n",
					"start_index = file_content.find(start_marker)\r\n",
					"end_index = file_content.find(end_marker) + len(end_marker)\r\n",
					"\r\n",
					"# Split the file content\r\n",
					"xml_content = file_content[start_index:end_index]\r\n",
					"\r\n",
					"print(xml_content)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%pip install com.databricks:spark-xml_2.12:0.12.0"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%pip install spark-xml\r\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Set Parameters\r\n",
					"storage_account_name = 'metlake'\r\n",
					"source_container_name = 'bronze'\r\n",
					"target_container_name = 'silver'\r\n",
					"start_marker = b'<?xml version'\r\n",
					"end_marker = b'</collect:MeteorologicalBulletin>'\r\n",
					"filename = '00bf6f60-a02f-4184-ab56-f564f6b53e8d.bin'\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Construct Source and Target file names\r\n",
					"base_filename = filename.split('.')[0]\r\n",
					"source_file = f\"abfss://{source_container_name}@{storage_account_name}.dfs.core.windows.net/{base_filename}.bin\"\r\n",
					"target_file = f\"abfss://{target_container_name}@{storage_account_name}.dfs.core.windows.net/{base_filename}.xml\"\r\n",
					"target_file_flattened = f\"abfss://{target_container_name}@{storage_account_name}.dfs.core.windows.net/{base_filename}_flattened.csv\"\r\n",
					"\r\n",
					"# Read Source file\r\n",
					"file_content = spark.sparkContext.binaryFiles(source_file).values().collect()[0]\r\n",
					"\r\n",
					"# Find the indices of the start and end markers\r\n",
					"start_index = file_content.find(start_marker)\r\n",
					"end_index = file_content.find(end_marker) + len(end_marker)\r\n",
					"\r\n",
					"# Split the file content\r\n",
					"xml_content = file_content[start_index:end_index]\r\n",
					"\r\n",
					"# Read XML data from the content string into a DataFrame\r\n",
					"df = spark.read.format(\"spark.xml\").option(\"rowTag\", \"person\").load(xml_content)\r\n",
					"\r\n",
					"# Show the DataFrame schema and content\r\n",
					"df.show()\r\n",
					""
				],
				"execution_count": 6
			}
		]
	}
}